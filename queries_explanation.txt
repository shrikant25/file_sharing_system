************************************
Queries:     

    DROP VIEW IF EXISTS show_jobs_info;
    DROP VIEW IF EXISTS show_stats;
    DROP VIEW IF EXISTS show_files_info;
    DROP TRIGGER IF EXISTS create_msg_receiver ON sysinfo;
    DROP TABLE IF EXISTS logs, receivers_comms, receiving_conns, job_scheduler, sysinfo, 
                            senders_comms, sending_conns, files, selfinfo;
    DROP FUNCTION IF EXISTS send_noti1(), send_noti2(), send_noti3(), create_comms(), run_jobs(), create_message(bytea, text, bytea, bytea, text, text, text, int);
    UNLISTEN noti_1sender;
    UNLISTEN noti_1receiver;
    UNLISTEN noti_1initialsender;


Explanation:

    Drop the views if they exists.
    Delete the tables if they exists.
    Delete the functions if they exists.
    UNLISTEN on event listener, listener is created by notif.c where name of listener is passed through config file.

************************************


************************************
Query:

CREATE TABLE job_scheduler (jobid UUID PRIMARY KEY, 
                            jobdata bytea NOT NULL,
                            jstate CHAR(5) NOT NULL DEFAULT 'N-1',
                            jtype TEXT NOT NULL DEFAULT '1',
                            jsource TEXT NOT NULL,
                            jparent_jobid UUID 
                                REFERENCES job_scheduler(jobid) 
                                ON UPDATE CASCADE 
                                ON DELETE CASCADE,
                            jdestination TEXT NOT NULL DEFAULT 0,
                            jpriority  TEXT NOT NULL DEFAULT '10',
                            jcreation_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

Explanation:

job_scheduler is the main control and processing unit of entire system.
It has a row(job) in N-0 state, which is a default row. 
Why it is required, currenty it act as parent of other processes,
this job is parent of itself.

Table has follwing columns:
jobid: UUID is universally unique value, so a good choice for primary key.
jobdata: Data for a job is stored in this column as bytea (binary format). 

    NOTICE: when reading binary data using libpq read it in binary format(flag = 1) which will treat it as 1 byte, if read in char format(flag = 0) then libpq will treat it has 2 byte value.
    See line 78 in processesor_r.c. 
    Make sure the result format flag is set accordingly
    I spent weeks fighting this behaviour, solution read the documentation carefully.


jstate: Denotes the state of job
        
        N-0: Root job
        
        N-1: Anything received from other system first gets into this state
        
        N-2: If hash value of job in N-1 state is validated then it is promoted from N-1 to N-2 state.
        
        D:   At any state, if any anomaly is observed in any job it is promoted to D(dead) state.
        
        N-3: If the job is intended for the system itself then it is promoted fron N-2 to N-3 state.
        
        N-4: After identification of job's type it is promoted from N-3 to N-4 state.
        
        S:   It is a job created by user program to send data to some other system.
             It only contains metadata (like filename, state, type(=6), source(system's own name), jobid, parent_jobid(root) destination, etc.)
         
        S-1:     
            1: N-2 to S-1: If the job is in N-2 state and it is meant for some other system (identified based   on its destination value) then is it promoted from N-2 to S-1 state.
            
            NOTICE: Next steps for above scenario are not implemented, currently all the checks for S-1 state are looking for a file present in files table, but for this scenario there is no file in files table, as the message is arrived from somewhere else, it contains the data with itself.
            So, how to proceed, maybe keep it some other state and then write  queries to establish connection with the intended system and then move it to S-4 state.

            2: S to S-1: If the destination name for job is present in sysinfo table then it is promoted from S to S-1.
        
        S-2: If the file size is greater than our systems capacity then it is promoted from S-1 to S-2 state.
            After this consensus for packet size is formed with destination system, if not already formed.
            Then file is read based on agreed packet size and child job(rows) containing actual chunk of data are created and are kept in S-4 state and have type = 2.
            One more job containing metadata of chunks is created and is kept in S-4 state with type = 3.

        S-2W: Job waiting for its children to jobs to be completed is promoted from S-2 to S-2W state.

        S-3: If the file size is less than or equal to our systems capacity then it is promoted from S-1 to S-3 state.
            After this consensus for packet size is formed with destination system, if not already formed.
            Then file is read and a single job(row) with actual file data is created and is kept in S-4 state with type = 1. 
        
        S-4: A child job containing actual data who has parents in S-2W or S-3W state, it will be read by processor_r.c and has type = 6.

        S-5: A job created for consensus forming, it is read by intial_sender.c.
             Suppose system 'A' wants form consensus with system 'B' then it will create a job with S-5 state and type = 4. Upon receiving this message, system B in order to reply, will create a message with S-5 state and type = 5.
	
	C:  A job is promoted to this state when its completed, if it has any child jobs then it will be promoted to 'C' when all its children are promoted to 'C'.

jtype: Indicates type of job.
       Type 0: Root job.
       Type 1: Single job.
       Type 2: Part of a set of jobs.
       Type 3: Containing metadata for set of jobs.
       Type 4: Initial message sent by a system for consensus formation.
       Type 5: Reply sent for message of Type 4.
       Type 6: Job to be sent to other system.

       For jobs in N-3 state:
        Type 1, 2, 3, 4, 5 are read from jobdata when job then the jtype column is populated with the data and job moves to N-4 state.

       For jobs in S-4 state:
        System populates the type column while creating the job, so for system this job has type = 6.
        But for other system which will receive this job, it will have type 1, 2, 3, 4 or 5  which that system will interpret by reading jobdata column, when the job will be in N-3 state of that system.

jsource: Name of the source system.

jdestination: Name of the destination system.

jparent_jobid: jobid of job that created this job.

jpriority: priority of job.

jcreation_time: time at which the job was created.

************************************


************************************
Query:

CREATE TABLE receivers_comms (rcomid SERIAL PRIMARY KEY, 
                              rdata1 BIGINT NOT NULL,
                              rdata2 BIGINT NOT NULL);

Explanation:
If database want to send some message to receiver program then it is stored in this table.

************************************


************************************
Query:

CREATE TABLE receiving_conns (rfd INTEGER PRIMARY KEY, 
                              ripaddr BIGINT NOT NULL, 
                              rcstatus INTEGER NOT NULL,
                              rctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

Explanation:
If receiver program wants to send a message to database then it is stored in this table.
************************************


************************************
Query:

CREATE TABLE sending_conns (sfd INTEGER NOT NULL,
                            sipaddr BIGINT NOT NULL, 
                            scstatus INTEGER NOT NULL,
                            sctime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                            CONSTRAINT pk_sending_conns PRIMARY KEY (sipaddr));

Explanation:
If sender program wants to send a message to database then it is stored in this table.
************************************

************************************
Query:
CREATE TABLE senders_comms (scommid SERIAL, 
                            mdata1 BIGINT NOT NULL,
                            mdata2 INTEGER NOT NULL, 
                            mtype TEXT NOT NULL,
                            CONSTRAINT pk_senders_comms PRIMARY KEY (mdata1, mdata2));

Explanation:
If database want to send some message to receiver program then it is stored in this table.
************************************

************************************
Query:
CREATE TABLE logs (logid SERIAL PRIMARY KEY,
                   log TEXT NOT NULL,
                   lgtime TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

Explanation:
Table use to store logs, used by storelog.c
************************************

************************************
Query:
CREATE TABLE sysinfo (system_name CHAR(10),
                      ipaddress BIGINT UNIQUE,
                      dataport INTEGER,
                      comssport INTEGER NOT NULL,
                      system_capacity INTEGER,
                      CONSTRAINT pk_sysinfo PRIMARY KEY(system_name, ipaddress));

Explanation:
Information about other systems is kept in this table
commport is used for consensus forming.
dataport is used for data sharing.
************************************


************************************
Query:                    
CREATE TABLE selfinfo (system_name CHAR(10) NOT NULL,
                      ipaddress BIGINT UNIQUE NOT NULL,
                      dataport INTEGER NOT NULL,
                      comssport INTEGER NOT NULL,
                      system_capacity INTEGER NOT NULL);

Explanation:
Information about the system itself.
************************************


************************************
Query:                    
CREATE TABLE files (file_id UUID PRIMARY KEY, 
                        file_name TEXT UNIQUE NOT NULL,  
                        file_data oid NOT NULL, 
                        creation_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP); 
Explanation:
Data and metadata of file is stored in this table.
************************************

************************************
Query:                    
CREATE OR REPLACE VIEW show_stats 
AS 
SELECT count(jstate) AS total_jobs, jstate, jpriority, jdestination, jtype 
FROM job_scheduler 
GROUP BY jstate, jpriority, jdestination, jtype;

Explanation:
View used by user_program to show stats.
************************************


************************************
Query:                    
CREATE OR REPLACE VIEW show_jobs_info AS
SELECT  js1.jobid, encode(js1.jobdata, 'escape') AS file_name, js1.jstate, js1.jpriority, js1.jdestination 
FROM job_scheduler js1 
WHERE js1.jtype = lpad('6', 5, ' ') 
GROUP BY js1.jobid;

Explanation:
View used by user_program to show job info.
************************************

************************************
Query:                    
CREATE OR REPLACE VIEW show_files_info AS
SELECT * FROM FILES;

Explanation:
View used by user_program to show files info.
************************************



************************************
Query:                    
CREATE OR REPLACE FUNCTION create_message(
    uuid_data bytea,
    message_type text,
    subheader bytea,
    messaget bytea,
    message_source text,
    message_destination text,
    message_priority text,
    max_capacity int
) RETURNS bytea
AS
$$
DECLARE   
    hnmessage bytea;
    fixed_type text;
    fixed_source text;
    fixed_destination text;
    fixed_priority text;
    extra_pad text;
    size_difference int;
BEGIN
    fixed_type := lpad(message_type, 5, ' ');
    fixed_source := lpad(message_source, 5, ' ');
    fixed_destination := lpad(message_destination, 5, ' ');
    fixed_priority := lpad(message_priority, 5, ' ');
    
    hnmessage := uuid_data || fixed_type::bytea || 
                fixed_source::bytea || fixed_destination::bytea || 
                fixed_priority::bytea ||  to_char(now(), 'YYYY-MM-DD HH24:MI:SS.US')::bytea || subheader || messaget;

    extra_pad := '';
    size_difference := (max_capacity - 32) - length(hnmessage);

    IF size_difference > 0 THEN
        extra_pad := lpad(extra_pad, size_difference, ' ');  
        hnmessage := hnmessage || extra_pad::bytea;
    END IF;
    
    return md5(hnmessage)::bytea || hnmessage;

END;
$$
LANGUAGE 'plpgsql';

Explanation: 
  This function is used by other queries to create a message,
  1: pass parameters,
  2: declare some variabels for local user,
  3: assign those variabels values with appropriate padding,
  4: create message
  5: if message size is less than capacity add padding
  6: get md5 hash of message, then prepend it to the rest of message(hnmessage) and return it.

************************************

************************************
Query:                    

INSERT INTO 
    selfinfo 
VALUES(
        lpad('M3', 5, ' '), 
        2130706433, 
        6001,
        6000, 
        1024*32
);

Explanation:
Store info about the system in selfinfo table
************************************


************************************
Query:                    
INSERT INTO 
    job_scheduler(jobdata, jstate, jtype, jsource, 
    jobid, jparent_jobid, jdestination, jpriority) 
VALUES (
        '__ROOT__', 
        'N-0', 
        '0', 
        lpad('M3', 5, ' '), 
        GEN_RANDOM_UUID(), 
        NULL, 
        lpad('M3', 5, ' '), 
        0
);

Explanation:
Create root job in job job_scheduler
keep parent job id as null.
************************************


************************************
Query:
UPDATE 
    job_scheduler 
SET 
    jparent_jobid = jobid 
WHERE 
    jobdata = '__ROOT__';

Explanation:
Set the parent job id of root to itself.
************************************



************************************
Query:
ALTER TABLE 
    job_scheduler 
ALTER COLUMN 
    jparent_jobid
SET NOT NULL;

Explanation:
Set parent job id column as not null.
Job will have root has parent or other jobs as parent.
************************************



************************************
Query:
CREATE OR REPLACE FUNCTION create_comms ()
RETURNS TRIGGER AS
$$
BEGIN
    INSERT INTO receivers_comms(rdata1, rdata2) VALUES (NEW.ipaddress, NEW.system_capacity);
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

Explanation:
This function is called when trigger "create_msg_receiver" is  fired after  Insert or UPDATE on
sysinfo table, it will insert data in receivers_comms table, this data will be read by processor_r.c and then passed on to recever.c 
************************************


************************************
Query:

CREATE TRIGGER
    create_msg_receiver
AFTER INSERT OR UPDATE ON
    sysinfo
FOR EACH ROW
WHEN
    (NEW.system_capacity != 0)
EXECUTE FUNCTION
    create_comms();

Explanation:
This  trigger is  fired after  Insert or UPDATE on sysinfo table and then it calls a function create_comms().
************************************


************************************
Query:
CREATE OR REPLACE FUNCTION send_noti2()
RETURNS TRIGGER AS 
$$
BEGIN
    PERFORM pg_notify('noti_1initialsender', gen_random_uuid()::TEXT);
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

Explanation:
This function is called when trigger "msg_for_initial_sender" is fired after Insert in job_scheduler for every row that has jstate = 'S-5', it will send a notification on noti_1initialsender listener, 
intial_sender.c will be listening on this listener. Every notification must be unique so that intial_sender.c
can diffrentiate between them so the use go gen_random_uuid() it generated a random uuid.
************************************



************************************
Query:
CREATE TRIGGER 
    msg_for_initial_sender
AFTER INSERT ON 
    job_scheduler
FOR EACH ROW 
WHEN 
    (NEW.jstate = 'S-5')
EXECUTE FUNCTION 
    send_noti2();

Explanation:
This  trigger is fired after Insert on job_scheduler for each row with state = S-5 and then it calls a function send_noti2().
************************************


************************************
Query:
CREATE OR REPLACE FUNCTION send_noti1()
RETURNS TRIGGER AS 
$$
BEGIN
    PERFORM pg_notify('noti_1sender', gen_random_uuid()::TEXT);
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

Explanation:
This function is called when trigger "msg_for_sender1" or "message_for_sencer2" is fired after update or insert in job_scheduler for every row that has jstate = 'S-4', it will send a notification on noti_1sender listener, 
processor_s.c will be listening on this listener. Every notification must be unique so that processor_s.c
can diffrentiate between them so the use go gen_random_uuid() it generated a random uuid.
************************************


************************************
Query:
CREATE TRIGGER 
    msg_for_sender1
AFTER UPDATE OR INSERT ON 
    job_scheduler
FOR EACH ROW 
WHEN 
    (NEW.jstate = 'S-4')
EXECUTE FUNCTION 
    send_noti1();

Explanation:
This  trigger is fired after update or insert on job_scheduler for each row with state = S-4 and then it calls a function send_noti1().
************************************


************************************
Query:
CREATE TRIGGER 
    msg_for_sender2
AFTER INSERT ON 
    senders_comms
FOR EACH ROW 
WHEN 
    (NEW.mtype in ('1','2'))
EXECUTE FUNCTION 
    send_noti1();

Explanation:
This  trigger is fired after insert on job_scheduler for each row with type = 1 or 2 and then it calls a function send_noti1().
************************************


************************************
Query:
CREATE OR REPLACE FUNCTION send_noti3()
RETURNS TRIGGER AS
$$
BEGIN
    PERFORM pg_notify('noti_1receiver', gen_random_uuid()::TEXT);
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;


Explanation:
This function is called when trigger "msg_for_receiver" is fired after  insert in recevers_comss for every row that has jstate = 'S-4', it will send a notification on noti_1Receiver listener, 
processor_rs.c will be listening on this listener. Every notification must be unique so that processor_r.c
can diffrentiate between them so the use go gen_random_uuid() it generated a random uuid.
************************************


************************************
Query:
CREATE TRIGGER
    msg_for_receiver
AFTER INSERT ON
    receivers_comms
FOR EACH ROW 
EXECUTE FUNCTION
    send_noti3();

Explanation:
This  trigger is fired after insert on recevers_comss for each row and then it calls a function send_noti3().
************************************


Explanation: Below function is called by launcher program after some interval
see launcher.c for more info (check lin3 112)
Understanding queries in below function are left as an exercise for reader, if you are clear with all the explanation up till this point then below queries will explain themselves.
before reading below queries, check for syntax of cte, lpad, encode, substr, groupby, '||' (append), '::' (typecastin datatype) in postgresql docs.

there are many groupby clauses which might feel redundant, but without them query will not work, they may look counter intuitive but when tested with actual data they play important role.

Complete code for below function in present in /db/build_schema.sql.

CREATE OR REPLACE FUNCTION run_jobs ()
RETURNS VOID AS
$$
BEGIN


END;
$$
LANGUAGE 'plpgsql';

